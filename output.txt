List(Function
funcSign: funcSign
args: params
args: List(param
typeS: int
id: i
arrayOrNot: false
)


decls: List()
stmts: {
List()}, Function
funcSign: funcSign
args: params
args: List(param
typeS: int
id: arg0
arrayOrNot: false
, param
typeS: int
id: arg1
arrayOrNot: false
, param
typeS: int
id: arg2
arrayOrNot: false
)


decls: List(decl
typeS: int
Vars: List(vardecl
id: a
argsOrArray: None
, vardecl
id: b
argsOrArray: None
)
)
stmts: {
List(Cond
cond:{
var
id: a
argsOrArray: None
rest: None}
thenStmt: blockStmts
blockstmts: List(assignment
left: a
array: None
right: {
var
id: a
argsOrArray: None
rest: Some(Binop
op: +
right: Num
value: 2
rest: None
rest: None)})
elesStmt: blockStmts
blockstmts: List(return
ret: None
)
, While
cond:{
Num
value: 1
rest: None}
stmts: blockStmts
blockstmts: List(Call
id:{
f}
args: Some(List(Num
value: 1
rest: None))
)
, for
init:{
Some(assignment
left: b
array: None
right: {
Num
value: 0
rest: None})}
cond:{
None}
step:{
Some(assignment
left: b
array: None
right: {
var
id: b
argsOrArray: None
rest: Some(Binop
op: +
right: Num
value: 2
rest: None
rest: None)})}
stmts: blockStmts
blockstmts: List(assignment
left: b
array: None
right: {
minus
value: Num
value: 1
rest: None
rest: None})
)})
